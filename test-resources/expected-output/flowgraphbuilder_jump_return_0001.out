fg2: <main> function()
  block 0: [entry]
    node 0: constant[undefined,v1] (test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js)
    node 1: function-decl[function f(),-] (test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js:1:1)
    ->[block 1]
  block 1:
    node 2: constant["tajs-host-env:string-replace-model.js",v2] (host-environment-sources-loader)
    node 3: constant[true,v3] (host-environment-sources-loader)
    ->[block 2]
  block 2:
    node 4: call[TAJS_load,v2,v3,v4] (host-environment-sources-loader)
    ->[block 3]
  block 3:
    node 5: call[-,v4,-] (host-environment-sources-loader)
    ->[block 4]
  block 4:
    node 6: constant["tajs-host-env:error-captureStackTrace-model.js",v5] (host-environment-sources-loader)
    node 7: constant[true,v6] (host-environment-sources-loader)
    ->[block 5]
  block 5:
    node 8: call[TAJS_load,v5,v6,v7] (host-environment-sources-loader)
    ->[block 6]
  block 6:
    node 9: call[-,v7,-] (host-environment-sources-loader)
    ->[block 7]
  block 7:
    node 10: read-variable['f',v9,v8] (test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js:12:1)
    ->[block 8]
  block 8:
    node 11: call[v8,v9,-] (test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js:12:1)
    ->[block 9]
  block 9:
    node 12: read-variable['v',v12,-] (test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js:13:13)
    ->[block 10]
  block 10:
    node 13: call[TAJS_assert,v12,-] (test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js:13:1)
    ->[block 11]
  block 11:
    node 14: constant["OK",v15] (test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js:15:16)
    ->[block 12]
  block 12:
    node 15: call[TAJS_dumpValue,v15,-] (test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js:15:1)
    ->[block 13]
  block 13: [exit-ordinary]
    node 16: return[v1] (test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js)
    ->[]
  block 14: [exit-exceptional]
    node 17: exceptional-return (test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js)
    ->[]
function f()
  block 15: [entry]
    node 18: constant[undefined,v1] (test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js:1:1)
    ->[block 16]
  block 16:
    node 19: constant[undefined,v1] (test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js:4:13)
    ->[block 18] ~>[block 17]
  block 17:
    node 20: catch[v2] (test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js:2:5)
    node 21(~26): constant[true,v3] (test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js:9:13)
    node 22(~27): write-variable[v3,'v'] (test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js:9:9)
    node 23: throw[v2] (test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js:2:5)
    ->[block 21]
  block 18:
    node 24(~26): constant[true,v4] (test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js:9:13)
    node 25(~27): write-variable[v4,'v'] (test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js:9:9)
    ->[block 20]
  block 19:
    node 26: constant[true,v4] (test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js:9:13)
    node 27: write-variable[v4,'v'] (test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js:9:9)
    ->[block 20]
  block 20: [exit-ordinary]
    node 28: return[v1] (test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js:1:1)
    ->[]
  block 21: [exit-exceptional]
    node 29: exceptional-return (test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js:1:1)
    ->[]

test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js: [definite] Exceptional program exit is unreachable
test-resources/src/flowgraphbuilder/flowgraph_builder_jump_return_0001.js:15:1: [info] Abstract value: "OK"
Soundness testing succeeded for 11 checks (with 0 expected failures)
